setwd("~/Penn State SummerFall 2020/Genomic Methods group/ordination methords")
meso_all<- read.csv("S&R3_Meso_freq.txt",sep= "\t", header=TRUE)
dim(meso_all)
meso_all<-as_tibble(meso_all)
meso_all
library(tidyverse)
library(tidyr)
library(ggplot2)
meso_all<-as_tibble(meso_all)
meso_all
meso_all <- separate(data = meso_all,col = pool,into = c("Trt","Time","Rep"), sep="_", remove=FALSE)
meso_all
#### First we want only 2.5 month timepoint and save it to a new tibble
meso_sub <- filter(meso_all,Time =="2.5m")
meso_sub
# Now we want to subset to the treatments (Trt) of interest (F, F32, and F4). We use the %in% notation because we want more than one Trt
meso_sub<-filter(meso_sub,Trt %in% c("F","F32","F4"))
meso_sub
# We can condense these two lines of code into a single one using the "&" (and) notation. What do you think the | (or) notation will give you?
meso_sub <- filter(meso_all,Trt %in% c("F","F32","F4") & Time =="2.5m")
meso_sub
# We can also "pipe" in our data frame into the filter function so we can string commands together.
# This is also identical and can come in handy such as in making the graph below.
meso_all %>% filter(Trt %in% c("F","F32","F4") & Time =="2.5m") -> meso_sub
#### Quick plot of these frequencies just so you can see it...
freqs<-meso_sub %>% group_by(Trt) %>% summarise_if(is.numeric,mean) %>% pivot_longer(-Trt,names_to= "strain",values_to = "freq")
mycols<-c("gold","orangered","darkblue")
ggplot(data = freqs, aes(x=freq,color=Trt))+
geom_histogram(fill="white", position="identity", alpha=.25,bins=50,lwd=1.2)+
scale_color_manual(values = mycols)+
theme_bw()
meso_all %>% filter(Time =="initial") -> initial
initial
initial<-apply(data.frame(initial[,c(-1:-4)]), 2, mean)
initial
?apply
##### Quick plot of the initial frequencies ########
ggplot(data = data.frame(Freq=initial),aes(x=Freq))+geom_histogram(fill="white",color="black")+theme_bw()
log2(.5)
log2(.3)
log2(10)
meso_fit<-as_tibble(cbind(meso_sub[,c(1:4)],log2(as.matrix(data.frame(meso_sub[,c(-1:-4)]))/initial)))
meso_sub
# I'm gonna try
meso_sub[c(1:4)]
# I'm gonna try
meso_sub[c(-1:-4)]
initial
# I'm gonna try
meso_sub[c(-1:-4)]/initial
# I'm gonna try
log2(meso_sub[c(-1:-4)]/initial)
# I'm gonna try
(cbind(meso_sub[,c(1:4)],log2(meso_sub[c(-1:-4)]/initial))
# I'm gonna try
(cbind(meso_sub[,c(1:4)],log2(meso_sub[c(-1:-4)]/initial)))
meso_fit<-as_tibble(cbind(meso_sub[,c(1:4)],log2(as.matrix(data.frame(meso_sub[,c(-1:-4)]))/initial)))
meso_fit %>% mutate(Trt = factor(Trt, levels= c("F4","F","F32"),labels= c("4C","22C","32C"))) -> meso_fit
# Define a color scheme
mycols<-c("darkblue","goldenrod","orangered")
##### Quick Histogram ####
fit<-meso_fit %>% group_by(Trt) %>% summarise_if(is.numeric,mean) %>% pivot_longer(-Trt,names_to= "strain",values_to = "fitness")
ggplot(data = fit, aes(x=fitness,color=Trt))+
geom_histogram(fill="white", position="identity", alpha=.25,bins=50,lwd=1.2)+
scale_color_manual(values = mycols)+
theme_bw()
### NOW lets run FINALLY run a PCA #####
library(FactoMineR)
library(factoextra)
#Quick Graphs
PCA(meso_fit[,c(-1:-4)],graph = TRUE)
# Save results to an object
res.PCA<-PCA(meso_fit[,c(-1:-4)],graph = FALSE)
# Access the Eigenvalues
get_eigenvalue(res.PCA)
# Graph the Eigenvalues. In this case, the vast majority (~80%) of the variation in the data can be explained by the first two dimensions.
fviz_eig(res.PCA)
#Quick combined graph
fviz_pca_biplot(res.PCA, habillage = meso_fit$Trt, palette = mycols)
#### You can also plot samples (individuals) and strains (variables) seperately
fviz_pca_ind(res.PCA,habillage = meso_fit$Trt, palette = mycols)
fviz_pca_var(res.PCA)
### We can get an idea of which axis each variable is loaded on with the cos2 values in the PCA variable results.
# Higher values mean a greater contribution to that dimension.
var <- get_pca_var(res.PCA)
var$cos2
### We can quickly visulize this data with corrplot
library(corrplot)
corrplot(var$cos2, is.corr=FALSE,method = "shade",tl.cex = .5, tl.col = "black",cl.cex=.5,cl.align.text="l",cl.ratio= .75)
##### RDA! ######
library(vegan)
# Run the rda model rda(y~x,data,scale)
rda1<-rda(meso_fit[,c(5:72)]~Trt,meso_fit, scale=TRUE)
# Quick plot of rda results
ordiplot(rda1,type = "text")
# Access all of the results
summary(rda1)
# Rsquared gives you an overall idea of well the overall model (your explanatory variables) did at explaining the variation in the data
RsquareAdj(rda1)
# Run a permutational significance test for the explanatory variables in the model
anova(rda1, step=1000, perm.max=1000, by= "terms")
# Run a permutational significance test for each axis
anova(rda1, step=1000, perm.max=1000, by= "axis")
#Make the window view wider
par(mfrow=c(1,1),mar=c(3, 3, 2.1, 1))
# Initiate the plot
rdaplot <- ordiplot(rda1, display=c("wa"),cex=.5,cex.axis=.8,cex.lab=.9, tck=.02,mgp=c(1.7,.5,0),type="none",
xlim=c(-2,2),ylim=c(-3,6),scaling=1, xlab=paste("RDA 1* (",round(summary(rda1)$cont$importance[2,1],2)*100,"% var.)",sep=""),
ylab=paste("RDA 2* (",round(summary(rda1)$cont$importance[2,2],2)*100,"% var.)",sep=""))
# Add the points to it
points(rda1,"wa", cex=0.8,pch=16,col=mycols[meso_fit$Trt])
# Add a circle around the points
ordiellipse(ord = rda1, mycols[meso_fit$Trt], kind="se", conf=0.95, lwd=2,label =FALSE,draw = "polygon", col=paste(mycols), border=paste(mycols),lty=c(1) ,alpha=63)
# Add lines from the Centroid
ordispider(rda1, meso_fit$Trt, lwd=1,label =FALSE,col=paste(mycols),cex=.5)
# Add a legend
legend("topleft", legend = levels(meso_fit$Trt), bty = "n",
col = mycols, pch = 21, pt.bg = mycols,)
# Rsquared gives you an overall idea of well the overall model (your explanatory variables) did at explaining the variation in the data
RsquareAdj(rda1)
# Run the rda model rda(y~x,data,scale)
rda1<-rda(meso_fit[,c(5:72)]~Trt,meso_fit, scale=TRUE)
# Quick plot of rda results
ordiplot(rda1,type = "text")
#Quick combined graph
fviz_pca_biplot(res.PCA, habillage = meso_fit$Trt, palette = mycols)
meso_fit
# thinking about questions
meso_fit
# thinking about questions
meso_fit%>%filter(Trt=="4C")
# thinking about questions
meso_fit%>%filter(Trt=="4C")%>%filter([c(-1:-4)>0])
# thinking about questions
meso_fit%>%filter(Trt=="4C")%>%filter([,c(-1:-4)]>0])
filter(mesofit[,c(-1:-4)]>0)
filter(meso_fit[,c(-1:-4)]>0)
meso_fit[,c(-1:-4)]
filter(cols(meso_fit[,c(-1:-4)])>0)
cols(meso_fit[,c(-1:-4)]
cols(meso_fit[,c(-1:-4)])
names(meso_fit[,c(-1:-4)])
names<-names(meso_fit[,c(-1:-4)])
meso_fit%>%filter(X1215>0)
mesofit
meso_fit
names<-names(meso_fit[,c(-1:-4)])
names
filter(meso_fit>0)
filter(meso_fit[,c(-1:-4)]>0)
meso_fit[,c(-1:-4)]>0)
meso_fit[,c(-1:-4)]>0
increase<-meso_fit[,c(-1:-4)]>0
increase
meso_fit
meso_fot%>%filter_at(vars(5:72), any_vars(. > 0))
meso_fit%>%filter_at(vars(5:72), any_vars(. > 0))
subset(meso_fit, rowSums(data[5:72] > 0) > 0)
subset(meso_fit, rowSums(data[5:72] > 0))
meso_fit%>%filter(vars(5:72), any_vars(. > 0))
?filter
meso_fit%>%filter_at(vars(5:72), any_vars(. > 0))
# thinking about questions
meso_fit%>%filter(Trt=="4C")%>%
%>%filter_at(vars(5:72), any_vars(. > 0))
# thinking about questions
meso_fit%>%filter(Trt=="4C")%>%
filter_at(vars(5:72), any_vars(. > 0))
# thinking about questions
increase4c<-meso_fit%>%filter(Trt=="4C")%>%
filter_at(vars(5:72), any_vars(. > 0))
increase4c
names(increase4c)
View(increase4c)
meso_fit%>%filter(Trt=="4C")%>%
filter_at(vars(5:72), any_vars(. > 0))
colSums()
?colSums
subset(data, colSums(data[5:72] > 0) > 0)
subset(meso_fit, colSums(data[5:72] > 0) > 0)
subset(meso_fit, colSums(data[5:72]) > 0)
subset(as.matrix(meso_fit), colSums(data[5:72]) > 0)
subset(as.matrix(as.data.frame(meso_fit)), colSums(data[5:72]) > 0)
subset(as.matrix(as.data.frame(meso_fit)), colSums(data[,5:72]) > 0)
subset(as.matrix(as.data.frame(meso_fit)), colSums(mesofit[,5:72]) > 0)
meso_fit[colSums(as.matrix(as.data.frame(meso_fit)[5:72] > 7) > 0, ]
meso_fit[colSums(meso_fit[5:72] > 7) > 0 ]
meso_fit
meso_fit[colSums(meso_fit[5:68] > 7) > 0 ]
meso_fit[colSums(meso_fit> 7) > 0 ]
meso_fit[colSums(meso_fit[,5:68] > 7) > 0 ]
meso_fit[colSums(meso_fit[5:68,] > 7) > 0 ]
View(meso_fit)
meso_fit[colSums(meso_fit[,c(-1:-4)] > 0)]
meso_fit%>%filter(Trt=="4C")%>%
filter_at(vars(5:72), any_vars(. > 0))
increase32c<-meso_fit%>%filter(Trt=="32C")%>%
filter_at(vars(5:72), any_vars(. > 0))
increase32c
meso_fit%>%filter(Trt=="32C")%>%
filter_at(vars(5:72), any_vars(. > 0))
increase32c[,20:30]
increase32c[,15:30]
increase32c[,30:45]
increase32c[,45:70]
increase32c[,45:60]
#Quick Graphs
PCA(meso_fit[,c(-1:-4)],graph = TRUE)
# Save results to an object
res.PCA<-PCA(meso_fit[,c(-1:-4)],graph = FALSE)
# Access the Eigenvalues
get_eigenvalue(res.PCA)
# Graph the Eigenvalues. In this case, the vast majority (~80%) of the variation in the data can be explained by the first two dimensions.
fviz_eig(res.PCA)
#Quick combined graph
fviz_pca_biplot(res.PCA, habillage = meso_fit$Trt, palette = mycols)
#### You can also plot samples (individuals) and strains (variables) seperately
fviz_pca_ind(res.PCA,habillage = meso_fit$Trt, palette = mycols)
fviz_pca_var(res.PCA)
### We can get an idea of which axis each variable is loaded on with the cos2 values in the PCA variable results.
# Higher values mean a greater contribution to that dimension.
var <- get_pca_var(res.PCA)
var$cos2
### We can quickly visulize this data with corrplot
library(corrplot)
corrplot(var$cos2, is.corr=FALSE,method = "shade",tl.cex = .5, tl.col = "black",cl.cex=.5,cl.align.text="l",cl.ratio= .75)
#Quick combined graph
fviz_pca_biplot(res.PCA, habillage = meso_fit$Trt, palette = mycols)
?fviz_pca_biplot
#Quick combined graph
fviz_pca_biplot(res.PCA, axes = c(3,4) habillage = meso_fit$Trt, palette = mycols)
#Quick combined graph
fviz_pca_biplot(res.PCA, axes = c(3,4), habillage = meso_fit$Trt, palette = mycols)
hist(meso_fit%>%filter(Trt=="4C"))
hist(meso_fit[,5:72}%>%filter(Trt=="4C"))
hist(meso_fit[,5:72]%>%filter(Trt=="4C"))
meso_fit[,5:72]
# which environment is most selective?
meso_fit%>%filter(Trt=="4C")%>%
hist(meso_fit[,5:72])
# which environment is most selective?
meso_fit%>%filter(Trt=="4C")%>% hist(as.numeric(meso_fit[,5:72])
# which environment is most selective?
meso_fit%>%filter(Trt=="4C")%>% hist(as.numeric(meso_fit[,5:72]))
meso_fit%>%filter(Trt=="4C")%>% hist(as.numeric(meso_fit[,5:72]))
meso_fit[,5:72]
as.numeric(meso_fit[,5:72]
as.numeric(meso_fit[,5:72])
##### Quick Histogram ####
fit<-meso_fit %>% group_by(Trt) %>% summarise_if(is.numeric,mean) %>% pivot_longer(-Trt,names_to= "strain",values_to = "fitness")
ggplot(data = fit, aes(x=fitness,color=Trt))+
geom_histogram(fill="white", position="identity", alpha=.25,bins=50,lwd=1.2)+
scale_color_manual(values = mycols)+
theme_bw()
##### Quick Histogram ####
fit<-meso_fit %>% group_by(Trt) %>% summarise_if(is.numeric,mean) %>% pivot_longer(-Trt,names_to= "strain",values_to = "fitness")
ggplot(data = fit, aes(x=fitness,color=Trt))+
geom_histogram(fill="white", position="identity", alpha=.25,bins=50,lwd=1.2)+
scale_color_manual(values = mycols)+
theme_bw()
ggplot(data = fit%>%filter(Trt=="4C"), aes(x=fitness,color=Trt))+
geom_histogram(fill="white", position="identity", alpha=.25,bins=50,lwd=1.2)+
scale_color_manual(values = mycols)+
theme_bw()
fit
?summarise()
fit%>%group_by(Trt)%>%summarise(min(fitness), max(fitness), sd(fitness) )
fit%>%group_by(Trt)%>%summarise(min(fitness), max(fitness), sd(fitness), range(fitness))
fit%>%group_by(Trt)%>%summarise(min(fitness), max(fitness), sd(fitness))
fit%>%group_by(Trt)%>%summarise("min"=min(fitness), "max"=max(fitness), sd(fitness))%>%mutate()
fit%>%group_by(Trt)%>%summarise("min"=min(fitness), "max"=max(fitness), "sd"=sd(fitness))%>%mutate()
fit%>%group_by(Trt)%>%summarise("min"=min(fitness), "max"=max(fitness), "sd"=sd(fitness))%>%mutate("range"= max-min)
fit%>%group_by(Trt)%>%summarise("min"=min(fitness), "max"=max(fitness), "sd"=sd(fitness), "mean"=mean(fitness), "median"=median(fitness))%>%mutate("range"= max-min)
fit%>%group_by(Trt)%>%summarise("min"=min(fitness), "max"=max(fitness), "sd"=sd(fitness), "mean"=mean(fitness), "median"=median(fitness))
fit%>%group_by(Trt)%>%summarise("min"=min(fitness), "max"=max(fitness), "sd"=sd(fitness), "mean"=mean(fitness), "median"=median(fitness))%>%
mutate("range"= max-min, "skew"= mean-median)
fit
fit%>%filter(fitness>0)
<-fit%>%filter(fitness>1)
fit%>%filter(fitness>1)
?sort
fit%>%filter(fitness>1)%>%sort(strain)
fit%>%filter(fitness>1)
fit%>%filter(fitness>1)%>%group_by(strain)
winners<-fit%>%filter(fitness>1)%>%group_by(strain)
View(winners)
winners<-fit%>%filter(fitness>1)%>%order(strain)
fit%>%filter(fitness>1)%>%order(strain)
fit[order(strain),]
fit%>%filter(fitness>1)%>%fit[order(strain),]
winners%>%filter(fitness>1)
winners[order(strain),]
winners%>%filter(fitness>1)%>%ungroup()
winners[order(strain),]
winners%>%filter(fitness>1)%>%ungroup()
winners
winners[order(winners$strain),]
winners%>%filter(Trt= "4C" & Trt = "32C")
winners%>%filter(Trt== "4C" & Trt =="32C")
winners%>%filter(Trt== "4C" |Trt =="32C")
winners%>%filter(Trt== "4C"|Trt =="32C")
winners[order(winners$strain),]
winners%>%filter(Trt== "4C"|Trt =="32C")
winners<-winners%>%filter(Trt== "4C"|Trt =="32C")
winners[order(winners$strain),]
winners %>%
group_by(strain) %>%
filter(n() == 2)
winners%>%filter(fitness>1)%>%ungroup()
winners %>%
group_by(strain) %>%
filter(n() == 2)
winners%>%filter(fitness>1)%>%ungroup()
winners %>%
group_by(strain) %>%
filter(n() == 3)
winners %>%
group_by(strain) %>%
filter(n() == 2)
winners%>%filter(fitness>0)%>%ungroup()
winners %>%
group_by(strain) %>%
filter(n() == 2)
winners%>%filter(fitness>0)%>%ungroup()
winners %>%
group_by(strain) %>%
filter(n() == 2)
winners
winners%>%filter(fitness>0)%>%ungroup()
fit%>%filter(fitness>0)%>%ungroup()
fit%>%filter(fitness>0)%>%ungroup() %>%
group_by(strain) %>%
filter(n() == 2)
winners<-fit%>%filter(fitness>0)%>%ungroup() %>%
group_by(strain) %>%
filter(n() == 2)
winners[order(winners$strain),]
winners<-fit%>%filter(fitness>0)%>%ungroup() %>%
group_by(strain) %>%
filter(n() == 3)
winners[order(winners$strain),]
generalists<-fit%>%filter(fitness>0)%>%ungroup() %>%
group_by(strain) %>%
filter(n() == 3)
generalists[order(winners$strain),]
generalists<-fit%>%filter(fitness>0)%>%ungroup() %>%
group_by(strain) %>%
filter(n() == 3)
generalists[, 21]
generalists[1:21]
generalists[1:21,]
specialists<-fit%>%filter(fitness>2)%>%ungroup() %>%
group_by(strain) %>%
filter(n() == 1)
specialists
